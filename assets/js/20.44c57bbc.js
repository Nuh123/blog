(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{366:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"初次学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初次学习"}},[t._v("#")]),t._v(" 初次学习")]),t._v(" "),a("h2",{attrs:{id:"jsx语法的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsx语法的特点"}},[t._v("#")]),t._v(" jsx语法的特点")]),t._v(" "),a("ol",[a("li",[t._v("class在标签中需要换为"),a("code",[t._v("className（小驼峰）")]),t._v("。"),a("strong",[t._v("jsx都是在写类，为防止与属性中的class混淆")]),t._v("，故使用"),a("code",[t._v("classNmae")]),t._v("。同理还有label标签关联input时的for属性，需使用"),a("code",[t._v("htmlFor")])]),t._v(" "),a("li",[t._v("自定义组件使用时标签首字母必须大写，原生hml标签还是小写开头")]),t._v(" "),a("li",[t._v("模板部分在html内部可以使用{}动态插值")]),t._v(" "),a("li",[t._v("像有些时候需要原生的innnerHTML类似的功能的时候，需要用"),a("code",[t._v("dangerouslySetInnerHTML")]),a("strong",[t._v("同时会带来xss问题")])]),t._v(" "),a("li",[t._v("注释类问题，一般编辑器快捷键解决，需要加{}，一般使用多行js模式，单行注释模式下需要额外换行")]),t._v(" "),a("li",[t._v("jsx 数组自动展开，在{}内，会自定展开每一项元素。这也是react渲染列表的手段。")]),t._v(" "),a("li",[t._v("jsx中插入行内样式需要再套一层"),a("code",[t._v("{}")]),t._v("，有下划线的属性需转换为小驼峰写法。")]),t._v(" "),a("li",[t._v("jsx也可以作为一种特殊的类型，简而言之就是可以把jsx赋值给变量。通过变量就可以使用jsx。")]),t._v(" "),a("li",[t._v("显示隐藏问题的jsx解决方案是三元表达式下返回"),a("code",[t._v("null")]),t._v("和要显示的HTML模板")])]),t._v(" "),a("h2",{attrs:{id:"vue-转react不适应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-转react不适应"}},[t._v("#")]),t._v(" vue 转react不适应")]),t._v(" "),a("ol",[a("li",[t._v("数据绑定分布来写，额外添加事件监听， "),a("code",[t._v("需要手动让表单元素变为受控组件")]),t._v("。")]),t._v(" "),a("li",[t._v("绑定事件名首字母大写")]),t._v(" "),a("li",[t._v("绑定事件没有this，在绑定时通过bind锁定，或定义方法为箭头函数")]),t._v(" "),a("li",[t._v("方法中改变state中的值不可直接赋值，需使用this.setstate")]),t._v(" "),a("li",[t._v("setstate时键值对两边模式(作用域)不同，左侧直接在state对象中，右侧在全局，故右侧需要this.state才能获取state中的值。")]),t._v(" "),a("li",[t._v("切记react中数据的改变必须通过setstate方法实现，虽然有些情况（数组）直接操作效果一致，但会带来一系列性能问题。")]),t._v(" "),a("li",[t._v("style写法上的差异，将之前的style值转换为对象写法，由于对象键名的特殊性，有-的属性需要转换为驼峰写法。另外由于插入的是整个对象，所以外观上是两个{}。")])]),t._v(" "),a("h2",{attrs:{id:"react-中的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-中的特点"}},[t._v("#")]),t._v(" react 中的特点")]),t._v(" "),a("ol",[a("li",[t._v("单项数据流")]),t._v(" "),a("li",[t._v("函数式编程")]),t._v(" "),a("li",[t._v("校验方式略复杂，类型校验和默认值的设置的分开写， 标签化引用时没有的属性才算触发默认值。")]),t._v(" "),a("li",[t._v("ref 钩子的使用比vue略复杂，后面插入的是一个函数，参数是当前标签，")]),t._v(" "),a("li")]),t._v(" "),a("h2",{attrs:{id:"关于setstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于setstate"}},[t._v("#")]),t._v(" 关于setState")]),t._v(" "),a("ol",[a("li",[t._v("setstate简单的可以认为是异步的，但细分场景又可能会出现同步场景，16之后为setstate设置了回调函数来完成一些异步操作。此外setState是一个"),a("strong",[t._v("函数")]),t._v("，它可以接受两种参数，"),a("code",[t._v("对象和函数")]),t._v("。之前讲的都是对象形式的，也就是state对象，其中只写需要改变的部分即可。这里着重说接受函数的形式，由于setState特殊的异步特点，"),a("strong",[t._v("参数是对象")]),t._v("的形式下想要依托上一次的setState结果做操作无法实现，故而出现参数是函数的形式，这个函数接受一个对象，"),a("strong",[t._v("上一下setState处理后")]),t._v("的stae对象。")])]),t._v(" "),a("p",[t._v("第二个参数（回调函数）解决异步问题")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("     回调函数模式待补全\n")])])]),a("p",[t._v("参数是对象的一般使用方法和问题")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => this.state.count 还是 undefined")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => undefined + 1 = NaN")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => NaN + 2 = NaN")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("参数是函数的一般使用方法")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handle")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" prevState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上一个 setState 的返回是 count 为 0，当前返回 1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" prevState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上一个 setState 的返回是 count 为 1，当前返回 3")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最后的结果是 this.state.count 为 3")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("setState的"),a("code",[t._v("合并性")]),t._v("与浏览器渲染机制类似，多次的操作setState不会无脑的渲染渲染多次，而是把这批多次setState放进一个队列，合适的时候一次更新，一次渲染。")])]),t._v(" "),a("h2",{attrs:{id:"react的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react的生命周期"}},[t._v("#")]),t._v(" react的生命周期")]),t._v(" "),a("p",[t._v("未整理")]),t._v(" "),a("h2",{attrs:{id:"react关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react关键字"}},[t._v("#")]),t._v(" react关键字")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("状态提升")]),t._v("，多组件同时依赖同一状态时，需要将这一状态放到最近的公共父组件。也是出现redux这种全局状态管理的需求。就是")])])])}),[],!1,null,null,null);s.default=e.exports}}]);